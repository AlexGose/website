<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alex Gose - blog</title><link href="https://alexgose.github.io/website/" rel="alternate"></link><link href="https://alexgose.github.io/website/feeds/blog.atom.xml" rel="self"></link><id>https://alexgose.github.io/website/</id><updated>2019-11-23T00:00:00+00:00</updated><entry><title>Build a Blog using Pelican, Docker, and Github Pages</title><link href="https://alexgose.github.io/website/build-blog-pelican-docker.html" rel="alternate"></link><published>2019-11-23T00:00:00+00:00</published><updated>2019-11-23T00:00:00+00:00</updated><author><name>Alex Gose</name></author><id>tag:alexgose.github.io,2019-11-23:/website/build-blog-pelican-docker.html</id><summary type="html">&lt;p&gt;How to use a Docker container running Pelican to build a blog website hosted on Github Pages.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="container-bird.jpg" src="https://alexgose.github.io/website/images/container-bird-small.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Birds flying near a container ship (&lt;a href="https://pixabay.com/photos/container-freighter-seafaring-elbe-1612960/"&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://alexgose.com/selecting-blog-software.html"&gt;last blog post&lt;/a&gt; explained why you might want to use a &lt;a href="https://docker.com"&gt;Docker&lt;/a&gt; container running &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; to publish your website if you are starting a blog.  This post will provide detailed instructions.  &lt;/p&gt;
&lt;p&gt;Although these instructions are for Ubuntu Linux (Xenial 16.04), the procedure for other operating systems should be similar.  This should be good enough to get you started, but you will have to eventually modify the &lt;a href="https://raw.githubusercontent.com/AlexGose/website/062beca904b94abcda254d824a57eec2e5eb236b/Dockerfile"&gt;Dockerfile&lt;/a&gt; if you want to change the theme or include more plugins.  Familiarity with git and the command line are assumed.&lt;/p&gt;
&lt;h2&gt;Step 1: Install Docker&lt;/h2&gt;
&lt;p&gt;You will need to install the Community Edition of Docker if you haven't already.  The official &lt;a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/"&gt;instructions&lt;/a&gt; for Ubuntu are good.  See the &lt;a href="https://docs.docker.com/install/"&gt;install&lt;/a&gt; page for other operating systems.  Be sure to run the &lt;code&gt;hello-world&lt;/code&gt; image to verify that docker was installed correctly by entering the command &lt;code&gt;sudo docker run hello-world&lt;/code&gt; at the command line.&lt;/p&gt;
&lt;h2&gt;Step 2: Create a Github Account&lt;/h2&gt;
&lt;p&gt;If you haven't already, be sure to &lt;a href="https://github.com"&gt;sign up&lt;/a&gt; for a Github account.  As mentioned in the last post, there are alternatives, but these instructions are specifically for &lt;a href="https://pages.github.com"&gt;Github Pages&lt;/a&gt;.  &lt;/p&gt;
&lt;h2&gt;Step 3: Create a New Public Repo&lt;/h2&gt;
&lt;p&gt;You will need to create a new repository for your website.  Click on "Repositories" at the top of your github webpage, then click the green "new" button.  At the new webpage, type in a name for your repository, such as "mywebsite".  Check the box next to "Initialize this repository with a README".  You should keep the "Public" radio button highlighted.  The webpage should look similar to the image below: &lt;/p&gt;
&lt;p&gt;&lt;img alt="new-repository-mywebsite.png" src="https://alexgose.github.io/website/images/new-repository-mywebsite.png"&gt;&lt;/p&gt;
&lt;p&gt;Click the green "Create Repository" button at the bottom of the page.  &lt;/p&gt;
&lt;p&gt;Open a command line session on your machine (Ctrl+Alt+T in Ubuntu).  Move into the directory where you would like to keep the files for your website:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Documents 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Clone the newly created git repository to your machine, replacing &lt;code&gt;username&lt;/code&gt; with your github username and &lt;code&gt;mywebsite&lt;/code&gt; with the name of your repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/username/mywebsite.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Move into the newly created directory with the same name as your repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; mywebsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, create a &lt;code&gt;content&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir content
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 4: Build the Pelican Docker Image&lt;/h2&gt;
&lt;p&gt;Download the docker and requirements files: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -O https://raw.githubusercontent.com/AlexGose/website/062beca904b94abcda254d824a57eec2e5eb236b/Dockerfile 
$ curl -O https://raw.githubusercontent.com/AlexGose/website/f9e09b0cc56eec4a1840ccbb1c2270f468b5574c/requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see a file named &lt;code&gt;Dockerfile&lt;/code&gt; in the current directory if you enter &lt;code&gt;ls&lt;/code&gt; at the command line.  Open up the file in a text editor (e.g., by entering &lt;code&gt;nano Dockerfile&lt;/code&gt; at the command line), and type a &lt;code&gt;#&lt;/code&gt; in front of the last three lines to comment them out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /website&lt;/span&gt;
&lt;span class="c"&gt;#COPY pelicanconf.py /website/&lt;/span&gt;
&lt;span class="c"&gt;#COPY publishconf.py /website/&lt;/span&gt;
&lt;span class="c"&gt;#COPY Makefile /website/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the file and exit the text editor (Ctrl+O and Ctrl+X in nano).&lt;/p&gt;
&lt;p&gt;Next, build the docker image, which we will name &lt;code&gt;pelican&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo docker build -t pelican .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A lot of output will be printed to the screen as Docker installs the required software.  This may take some time.  You should see a message indicating that the image was created successfully at the end.  You should also see the image listed when you type the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo docker images
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 5: Create the Build and Configuration Files&lt;/h2&gt;
&lt;p&gt;Next, we will run the &lt;code&gt;pelican-quickstart&lt;/code&gt; program in the docker container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo docker run -it --rm -v &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;:/website pelican pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will be prompted to answer a series of questions to create the build and configuration files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Where do you want to create your new web site? [.] 
&amp;gt; What will be the title of this web site? &amp;quot;My Website&amp;quot;
&amp;gt; Who will be the author of this web site? John Doe
&amp;gt; What will be the default language of this web site? [en] 
&amp;gt; Do you want to specify a URL prefix? e.g., https://example.com   (Y/n) n
&amp;gt; Do you want to enable article pagination? (Y/n) 
&amp;gt; How many articles per page do you want? [10] 
&amp;gt; What is your time zone? [Europe/Paris] 
&amp;gt; Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n) 
&amp;gt; Do you want to upload your website using FTP? (y/N) 
&amp;gt; Do you want to upload your website using SSH? (y/N) 
&amp;gt; Do you want to upload your website using Dropbox? (y/N) 
&amp;gt; Do you want to upload your website using S3? (y/N) 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) 
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y
&amp;gt; Is this your personal page (username.github.io)? (y/N) 
Done. Your new project is available at /website
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Be sure to answer "y" when asked if you will upload your website to Github Pages.  When you are done, you will see a number of new files and directories if you enter &lt;code&gt;ls&lt;/code&gt; at the command line.  This is a good time to commit and push the changes to your remote github repository if you haven't done so already:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;initial upload&amp;quot;&lt;/span&gt;
$ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 6: Modify the Build and Configuration Files&lt;/h2&gt;
&lt;p&gt;Next, we will modify the build and configuration files. Open &lt;code&gt;publishconf.py&lt;/code&gt; in a text editing program (e.g., by entering &lt;code&gt;sudo nano publishconf.py&lt;/code&gt;), and add the name of your website URL to the end of the &lt;code&gt;SITEURL&lt;/code&gt; variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SITEURL = &amp;#39;https://username.github.io/mywebsite&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Be sure to replace &lt;code&gt;username&lt;/code&gt; with your github username and &lt;code&gt;mywebsite&lt;/code&gt; with the name of your repository in the URL.  Save this file and open &lt;code&gt;pelicanconf.py&lt;/code&gt; next.  You can modify the timezone by changing the quoted text after &lt;code&gt;TIMEZONE&lt;/code&gt;.  You can look up the possible values &lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;here&lt;/a&gt;.  Comment out the lines for the &lt;code&gt;LINKS&lt;/code&gt; and &lt;code&gt;SOCIAL&lt;/code&gt; variables, putting a &lt;code&gt;#&lt;/code&gt; at the beginning of each line, if you do not wish to include those on your website.  If you wish to include links to your social media sites, then you can see an example of how this is done &lt;a href="https://raw.githubusercontent.com/AlexGose/website/2ce3f6f8832678bda021c8ba2874c62a0997447a/pelicanconf.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the bottom of this file add these lines for the &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3"&gt;pelican-bootstrap3 theme&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;themes/pelican-bootstrap3&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plugins/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;i18n_subsites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;JINJA_ENVIRONMENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extensions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jinja2.ext.i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After saving and closing this file, open the &lt;code&gt;Makefile&lt;/code&gt; in a text editor.  Here, we will add a new &lt;code&gt;.git&lt;/code&gt; target and modify the existing &lt;code&gt;github&lt;/code&gt; target.  The bottom of the file should look like this when you are done, with your username replacing &lt;code&gt;username&lt;/code&gt; and your repository name replacing &lt;code&gt;mywebsite&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.git: 
    git init
    git remote add origin -f https://github.com/username/mywebsite 

github: publish | .git
    ghp-import -m &amp;quot;generate pelican website&amp;quot; $(OUTPUTDIR)
    git push origin gh-pages 

.PHONY: html help clean regenerate serve serve-global devserver publish github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save, commit, and push the changes to github as we did previously:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;add build and configuration files&amp;quot;&lt;/span&gt;
$ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From this point on, I'll assume you will commit and push changes to github whenever you modify a file in this directory.&lt;/p&gt;
&lt;h2&gt;Step 7: Create Some Content&lt;/h2&gt;
&lt;p&gt;Move into the &lt;code&gt;content&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is where you will store the content of your blog website in the form of markdown files, which are specially formatted plain text files.  Markdown is easy to learn if you don't already know it.  Check out &lt;a href="https://www.markdownguide.org/basic-syntax"&gt;this website&lt;/a&gt; for example.  I recommend learning how to format headers and hyperlinks first.  You can pick up the rest later as needed.&lt;/p&gt;
&lt;p&gt;Using a text editor, open a new file named "testpost.md", and add the following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: Test Blog Post
Date: 2019-01-01
Tags: Test, Blog
Summary: A test blog post

&lt;span class="gu"&gt;##&lt;/span&gt; Level 2 Header

This is a test blog post.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save this markdown file in the current &lt;code&gt;content&lt;/code&gt; directory, and move back to the parent directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Be sure to read the &lt;a href="https://docs.getpelican.com/en/stable/content.html"&gt;Pelican documentation&lt;/a&gt; for more information on writing content.&lt;/p&gt;
&lt;h2&gt;Step 8: Build A Local Development Server&lt;/h2&gt;
&lt;p&gt;Open up the &lt;code&gt;Dockerfile&lt;/code&gt; in a text editor and remove the &lt;code&gt;#&lt;/code&gt; from the beginning of the last three lines to uncomment them.  Save the changes and re-build the docker image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker build -t pelican .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we will build the website locally to see how it looks before publishing it on Github Pages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --rm -it -p &lt;span class="m"&gt;8000&lt;/span&gt;:8000 -v &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/content:/website/content:ro -v &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/output:/website/output pelican make devserver 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see the website by visiting &lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt; in a browser.  To stop the development server type Ctrl+C in the terminal window.&lt;/p&gt;
&lt;h2&gt;Step 9: Publish the Website&lt;/h2&gt;
&lt;p&gt;Next, we publish the website to github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --rm -it -v &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/content:/website/content:ro -v &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/output:/website/output pelican make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will be prompted for your username and password while the &lt;code&gt;ghp-import&lt;/code&gt; program sends output files into the "gh-pages" branch of your github repository.  After waiting a number of minutes, your website should be accessible at "https://username.github.io/mywebsite" with the username and repository name changed appropriately.&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Hopefully these instructions are enough to get you started with publishing your blog website using Pelican running in a Docker container.  You should be able to create new content with the development server running.  You just need to refresh the browser page to see the changes.  Once you push the changes to github, you can publish the website to Github Pages by entering the same command we used in Step 9.&lt;/p&gt;</content><category term="Pelican"></category><category term="Python"></category><category term="Docker"></category><category term="Github-Pages"></category></entry><entry><title>Starting a blog? Consider Pelican, Docker, and Github Pages</title><link href="https://alexgose.github.io/website/selecting-blog-software.html" rel="alternate"></link><published>2019-11-04T00:00:00+00:00</published><updated>2019-11-04T00:00:00+00:00</updated><author><name>Alex Gose</name></author><id>tag:alexgose.github.io,2019-11-04:/website/selecting-blog-software.html</id><summary type="html">&lt;p&gt;Why you might want to use a Docker container running Pelican to publish your website on Github Pages if you are starting a blog.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="container-bird.jpg" src="https://alexgose.github.io/website/images/container-bird-small.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Birds flying near a container ship (&lt;a href="https://pixabay.com/photos/container-freighter-seafaring-elbe-1612960/"&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;Who should read this?&lt;/h2&gt;
&lt;p&gt;You want to start a blog, and you are no stranger to the command line or Linux operating system.  You do not expect to have a lot of traffic initially, but you are willing to make changes to accommodate future needs.  You are not interested in making money off of your website at this time.  You view this project as an opportunity to learn more about aspects of web development that interest you.  &lt;/p&gt;
&lt;p&gt;If this sounds like you, then read on.  In this post, I'll discuss why you might want to use &lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt; running in a &lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt; container to publish your blog on &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;.  In the &lt;a href="https://alexgose.com/build-blog-pelican-docker.html"&gt;next post&lt;/a&gt;, I'll show you how to set up your own blog with these programs.&lt;/p&gt;
&lt;h2&gt;Static Site Generators vs. WordPress&lt;/h2&gt;
&lt;p&gt;Most websites recommend a &lt;a href="https://en.wikipedia.org/wiki/Content_management_system"&gt;Content Management System&lt;/a&gt; (CMS) for blogging, with &lt;a href="https://wordpress.org"&gt;WordPress&lt;/a&gt; being the most popular suggestion.  Other options include &lt;a href="https://www.joomla.org"&gt;Joomla&lt;/a&gt; and &lt;a href="https://www.drupal.org"&gt;Drupal&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I have no experience using WordPress, but I think it is probably the best choice for most people getting started.  It doesn't require much, if any, knowledge of web development or programming, but knowing more will give you more options for your website.  Because WordPress is so popular, there are many resources and hosting options available.&lt;/p&gt;
&lt;p&gt;WordPress is powerful and easy to use but does have some drawbacks.  The power comes from the ability to run programs on the web server.  This gives WordPress more capabilities than a &lt;a href="https://en.wikipedia.org/wiki/Static_web_page"&gt;static website&lt;/a&gt;, where a server simply sends files to website visitors.  This extra power requires more computing resources and administrative skill to ensure the smooth and safe operation of your website.  If you don't have these skills, then usually you end up paying someone who does.  This is often in the form of monthly fees paid to your hosting company.  &lt;/p&gt;
&lt;p&gt;Static websites, like this one at the time this is being written, are a simpler option.  The relative ease of administering a static website often translates into a lower cost of hosting.  There are even a number of free options, which will be discussed below.  If you choose to be the administrator for the server of your site, then you will tend to have fewer operational and security concerns with a static website.  For this reason, a static blog is often an excellent first step towards building a more complex website. &lt;/p&gt;
&lt;h2&gt;Pelican&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt; is an open source static site generating software program written in python.  Other static site generating programs include &lt;a href="https://gohugo.io"&gt;Hugo&lt;/a&gt; and &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I don't have experience with other static site generating programs.  I mainly chose Pelican because it is written in python.  Since I know python, I can more easily view and modify the source code at some point in the future if I want.  Since Pelican is much simpler than a CMS program like WordPress, inspecting the source code should be easier too. &lt;/p&gt;
&lt;p&gt;I was also attracted to Pelican for its selection of &lt;a href="https://docs.getpelican.com/en/stable/plugins.html"&gt;plugins&lt;/a&gt; and &lt;a href="https://github.com/getpelican/pelican-themes"&gt;themes&lt;/a&gt;, as well as the size of the development community.  I may experiment in the future and try other static site generating programs.&lt;/p&gt;
&lt;h2&gt;Hosting&lt;/h2&gt;
&lt;p&gt;I am currently using Github Pages for this website.  Github Pages allows you to use a custom domain, which can be purchased for a nominal yearly fee.  Although this hosting service is free, there are some &lt;a href="https://help.github.com/en/github/working-with-github-pages/about-github-pages#guidelines-for-using-github-pages"&gt;restrictions&lt;/a&gt;, which you should be aware of before using this service.  &lt;/p&gt;
&lt;p&gt;Another free hosting option is &lt;a href="https://about.gitlab.com/product/pages/"&gt;Gitlab Pages&lt;/a&gt;, but I don't have experience with it.  If you decide to use a paid host, then a static website is usually easier or cheaper to run.  I may experiment with other hosting services in the future.&lt;/p&gt;
&lt;h2&gt;Docker vs. Virtual Environments&lt;/h2&gt;
&lt;p&gt;With any static site generator, like Pelican, the content of your website is stored in a simple format, such as &lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;markdown&lt;/a&gt; files.  The static site generator converts your content into fully formatted html files, which can be read and displayed by a browser.  These html files are sent from the web server to people visiting your website.&lt;/p&gt;
&lt;p&gt;Like most python programs, Pelican can be installed in a virtual environment on your machine, such as your laptop computer.  This helps to isolate the program, which makes it easier to control dependencies and upgrades of the software.  However, it is still possible for two machines to have different virtual environments for the same project, and the process for setting up the environments on these machines can also be different. &lt;/p&gt;
&lt;p&gt;This can cause difficulties if more than one machine is used to build a website and the machines use different operating systems, or even different versions of the same operating system.  The complexity of maintaining environments on separate machines becomes more complex over time as software is upgraded.  Docker containers offer a solution to this problem by maintaining a consistent deployment of software across machines. &lt;/p&gt;
&lt;p&gt;Docker containers also provide a measure of isolation from other programs running on a single machine.  With Docker you can limit the risk of other programs modifying the directories or dependent libraries used by Pelican.  As you can see with the &lt;a href="https://github.com/AlexGose/website/blob/master/Dockerfile"&gt;docker file&lt;/a&gt; used for this website, you can often maintain a relatively small amount of source code to build your website with Docker, avoiding the need to store files for plugins and themes directly on your machine.&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;In conclusion, there are many software and hosting options available for building a blog website.  By seeing the options chosen for this website, and how they compare to some other popular options, I hope you will be in a better position to decide for yourself.  &lt;/p&gt;
&lt;p&gt;Keep in mind that there aren't really any bad choices.  Once you start, you can always make modifications or change the software, hosting, or content later.  Just be sure to backup your work.  If you don't mind the extra time and effort, you might try more than one option. &lt;/p&gt;</content><category term="Pelican"></category><category term="Python"></category><category term="Docker"></category><category term="Github-Pages"></category></entry></feed>